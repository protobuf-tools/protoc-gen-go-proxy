// Code generated by protoc-gen-grpcproxy. DO NOT EDIT.
// versions:
// - protoc-gen-grpcproxy devel
// - protoc           v3.21.5
// source: google/spanner/v1/spanner.proto

package spannerproxy

import (
	context "context"
	errors "errors"
	v1 "google.golang.org/genproto/googleapis/spanner/v1"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	net "net"
)

const (
	FullMethodBatchCreateSessions = "/google.spanner.v1.Spanner/BatchCreateSessions"
	FullMethodBeginTransaction    = "/google.spanner.v1.Spanner/BeginTransaction"
	FullMethodCommit              = "/google.spanner.v1.Spanner/Commit"
	FullMethodCreateSession       = "/google.spanner.v1.Spanner/CreateSession"
	FullMethodDeleteSession       = "/google.spanner.v1.Spanner/DeleteSession"
	FullMethodExecuteBatchDml     = "/google.spanner.v1.Spanner/ExecuteBatchDml"
	FullMethodExecuteSql          = "/google.spanner.v1.Spanner/ExecuteSql"
	FullMethodExecuteStreamingSql = "/google.spanner.v1.Spanner/ExecuteStreamingSql"
	FullMethodGetSession          = "/google.spanner.v1.Spanner/GetSession"
	FullMethodListSessions        = "/google.spanner.v1.Spanner/ListSessions"
	FullMethodPartitionQuery      = "/google.spanner.v1.Spanner/PartitionQuery"
	FullMethodPartitionRead       = "/google.spanner.v1.Spanner/PartitionRead"
	FullMethodRead                = "/google.spanner.v1.Spanner/Read"
	FullMethodRollback            = "/google.spanner.v1.Spanner/Rollback"
	FullMethodStreamingRead       = "/google.spanner.v1.Spanner/StreamingRead"
)

var ErrNotSupported = errors.New("operation not supported")

type proxyServer struct {
	proxy *Proxy
}

func (s *proxyServer) BatchCreateSessions(ctx context.Context, req *v1.BatchCreateSessionsRequest) (*v1.BatchCreateSessionsResponse, error) {
	fn := s.proxy.BatchCreateSessions
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) BeginTransaction(ctx context.Context, req *v1.BeginTransactionRequest) (*v1.Transaction, error) {
	fn := s.proxy.BeginTransaction
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) Commit(ctx context.Context, req *v1.CommitRequest) (*v1.CommitResponse, error) {
	fn := s.proxy.Commit
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) CreateSession(ctx context.Context, req *v1.CreateSessionRequest) (*v1.Session, error) {
	fn := s.proxy.CreateSession
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) DeleteSession(ctx context.Context, req *v1.DeleteSessionRequest) (*emptypb.Empty, error) {
	fn := s.proxy.DeleteSession
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) ExecuteBatchDml(ctx context.Context, req *v1.ExecuteBatchDmlRequest) (*v1.ExecuteBatchDmlResponse, error) {
	fn := s.proxy.ExecuteBatchDml
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) ExecuteSql(ctx context.Context, req *v1.ExecuteSqlRequest) (*v1.ResultSet, error) {
	fn := s.proxy.ExecuteSql
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) ExecuteStreamingSql(req *v1.ExecuteSqlRequest, srv v1.Spanner_ExecuteStreamingSqlServer) error {
	fn := s.proxy.ExecuteStreamingSql
	if fn == nil {
		return ErrNotSupported
	}

	return fn(req, srv)
}

func (s *proxyServer) GetSession(ctx context.Context, req *v1.GetSessionRequest) (*v1.Session, error) {
	fn := s.proxy.GetSession
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) ListSessions(ctx context.Context, req *v1.ListSessionsRequest) (*v1.ListSessionsResponse, error) {
	fn := s.proxy.ListSessions
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) PartitionQuery(ctx context.Context, req *v1.PartitionQueryRequest) (*v1.PartitionResponse, error) {
	fn := s.proxy.PartitionQuery
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) PartitionRead(ctx context.Context, req *v1.PartitionReadRequest) (*v1.PartitionResponse, error) {
	fn := s.proxy.PartitionRead
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) Read(ctx context.Context, req *v1.ReadRequest) (*v1.ResultSet, error) {
	fn := s.proxy.Read
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) Rollback(ctx context.Context, req *v1.RollbackRequest) (*emptypb.Empty, error) {
	fn := s.proxy.Rollback
	if fn == nil {
		return nil, ErrNotSupported
	}

	return fn(ctx, req)
}

func (s *proxyServer) StreamingRead(req *v1.ReadRequest, srv v1.Spanner_StreamingReadServer) error {
	fn := s.proxy.StreamingRead
	if fn == nil {
		return ErrNotSupported
	}

	return fn(req, srv)
}

// Proxy allows to create Spanner proxy servers.
type Proxy struct {
	BatchCreateSessions func(ctx context.Context, req *v1.BatchCreateSessionsRequest) (*v1.BatchCreateSessionsResponse, error)
	BeginTransaction    func(ctx context.Context, req *v1.BeginTransactionRequest) (*v1.Transaction, error)
	Commit              func(ctx context.Context, req *v1.CommitRequest) (*v1.CommitResponse, error)
	CreateSession       func(ctx context.Context, req *v1.CreateSessionRequest) (*v1.Session, error)
	DeleteSession       func(ctx context.Context, req *v1.DeleteSessionRequest) (*emptypb.Empty, error)
	ExecuteBatchDml     func(ctx context.Context, req *v1.ExecuteBatchDmlRequest) (*v1.ExecuteBatchDmlResponse, error)
	ExecuteSql          func(ctx context.Context, req *v1.ExecuteSqlRequest) (*v1.ResultSet, error)
	ExecuteStreamingSql func(req *v1.ExecuteSqlRequest, srv v1.Spanner_ExecuteStreamingSqlServer) error
	GetSession          func(ctx context.Context, req *v1.GetSessionRequest) (*v1.Session, error)
	ListSessions        func(ctx context.Context, req *v1.ListSessionsRequest) (*v1.ListSessionsResponse, error)
	PartitionQuery      func(ctx context.Context, req *v1.PartitionQueryRequest) (*v1.PartitionResponse, error)
	PartitionRead       func(ctx context.Context, req *v1.PartitionReadRequest) (*v1.PartitionResponse, error)
	Read                func(ctx context.Context, req *v1.ReadRequest) (*v1.ResultSet, error)
	Rollback            func(ctx context.Context, req *v1.RollbackRequest) (*emptypb.Empty, error)
	StreamingRead       func(req *v1.ReadRequest, srv v1.Spanner_StreamingReadServer) error
}

// Serve starts serving the proxy server on the given listener with the specified options.
func (p *Proxy) Serve(l net.Listener, opts ...grpc.ServerOption) error {
	srv := grpc.NewServer(opts...)
	v1.RegisterSpannerServer(srv, &proxyServer{proxy: p})

	return srv.Serve(l)
}
